// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/99designs/gqlgen/graphql"
)

type Profile interface {
	IsProfile()
}

// An Admin is a
type Admin struct {
	ID        *int64     `json:"ID" gorm:"primarykey"`
	CreatedAt *time.Time `json:"createdAt"`
	UpdatedAt *time.Time `json:"updatedAt"`
	UserID    *int64     `json:"userID"`
	User      *User      `json:"user" gorm:"foreignKey:UserID"`
}

type AdminInput struct {
	User *UserInput `json:"user"`
}

// An Anomaly is a
type Anomaly struct {
	ID           *int64         `json:"ID" gorm:"primarykey"`
	CreatedAt    *time.Time     `json:"createdAt"`
	UpdatedAt    *time.Time     `json:"updatedAt"`
	AssignedToID *int64         `json:"assignedToID"`
	AssignedTo   *EstateAgent   `json:"assignedTo" gorm:"foreignKey:AssignedToID"`
	CreateByID   *int64         `json:"createByID"`
	CreateBy     *Tenant        `json:"createBy" gorm:"foreignKey:CreateByID"`
	PropertyID   *int64         `json:"propertyID"`
	Property     *Property      `json:"property" gorm:"foreignKey:PropertyID"`
	Description  string         `json:"description"`
	Type         AnomalyTypes   `json:"type"`
	State        *AnomalyStates `json:"state"`
	Priority     *Priority      `json:"priority"`
}

type AnomalyInput struct {
	Property    *int64       `json:"property"`
	Type        AnomalyTypes `json:"type"`
	Description string       `json:"description"`
}

type AnomalyUpdateInput struct {
	AssignedTo *int64         `json:"assignedTo"`
	State      *AnomalyStates `json:"state"`
	Priority   *Priority      `json:"priority"`
}

// An Asset is a document or a picture
type Asset struct {
	ID        *int64     `json:"ID" gorm:"primarykey"`
	CreatedAt *time.Time `json:"createdAt"`
	UpdatedAt *time.Time `json:"updatedAt"`
	URL       string     `json:"url"`
	Type      string     `json:"type"`
	Storage   string     `json:"storage"`
}

type Badge struct {
	ID   *int64     `json:"ID" gorm:"primarykey"`
	Type *BadgeType `json:"type"`
}

// A Company is a
type Company struct {
	ID          *int64     `json:"ID" gorm:"primarykey"`
	CreatedAt   *time.Time `json:"createdAt"`
	UpdatedAt   *time.Time `json:"updatedAt"`
	Name        string     `json:"name"`
	LogoID      *int64     `json:"logoID"`
	Logo        *Asset     `json:"logo" gorm:"foreignKey:LogoID"`
	Description *string    `json:"description"`
	Tel         string     `json:"tel"`
	UserID      *int64     `json:"userID"`
	User        *User      `json:"user" gorm:"foreignKey:UserID"`
	Verified    *bool      `json:"verified"`
}

func (Company) IsProfile() {}

type CompanyInput struct {
	Name        string     `json:"name"`
	User        *UserInput `json:"user"`
	Logo        *string    `json:"logo"`
	Description string     `json:"description"`
	Tel         string     `json:"tel"`
}

// A Credential is a
type Credential struct {
	User  *User   `json:"user"`
	Token *string `json:"token"`
}

// An EstateAgent is a
type EstateAgent struct {
	ID           *int64        `json:"ID" gorm:"primarykey"`
	CreatedAt    *time.Time    `json:"createdAt"`
	UpdatedAt    *time.Time    `json:"updatedAt"`
	CompanyID    *int64        `json:"companyID"`
	Company      *Company      `json:"company" gorm:"foreignKey:CompanyID"`
	UserID       *int64        `json:"userID"`
	User         *User         `json:"user" gorm:"foreignKey:UserID"`
	Tel          string        `json:"tel"`
	About        *string       `json:"about"`
	Specialities []*Speciality `json:"specialities" gorm:"many2many:estage-agent_specialities"`
	Skills       []*Skill      `json:"skills" gorm:"many2many:estate-agent_skills"`
}

func (EstateAgent) IsProfile() {}

type EstateAgentInput struct {
	User         *UserInput        `json:"user"`
	Tel          string            `json:"tel"`
	About        *string           `json:"about"`
	Specialities []*SpecialityType `json:"specialities"`
	Skills       []*SkillType      `json:"skills"`
}

// A Property  is a
type Property struct {
	ID               *int64     `json:"ID" gorm:"primarykey"`
	CreatedAt        *time.Time `json:"createdAt"`
	UpdatedAt        *time.Time `json:"updatedAt"`
	Area             float64    `json:"area"`
	Country          string     `json:"country"`
	CityName         string     `json:"cityName"`
	Address          string     `json:"address"`
	PostalCode       string     `json:"postalCode"`
	Type             string     `json:"type"`
	CompanyID        *int64     `json:"companyID"`
	Company          *Company   `json:"company" gorm:"foreignKey:CompanyID"`
	Photos           []*Asset   `json:"photos" gorm:"many2many:property_photos"`
	ModelID          *int64     `json:"modelID"`
	Model            *Asset     `json:"model" gorm:"foreignKey:ModelID"`
	Badges           []*Badge   `json:"badges" gorm:"many2many:property_badges"`
	Description      *string    `json:"description"`
	Rooms            int64      `json:"rooms"`
	Bedrooms         int64      `json:"bedrooms"`
	Furnished        bool       `json:"furnished"`
	ConstructionDate *time.Time `json:"constructionDate"`
	EnergyRating     Energy     `json:"energyRating"`
	RentAmount       float64    `json:"rentAmount"`
	ChargesAmount    float64    `json:"chargesAmount"`
}

type PropertyInput struct {
	Area             float64           `json:"area"`
	Country          string            `json:"country"`
	CityName         string            `json:"cityName"`
	Address          string            `json:"address"`
	PostalCode       string            `json:"postalCode"`
	Type             string            `json:"type"`
	Photos           []*graphql.Upload `json:"photos"`
	Model            *graphql.Upload   `json:"model"`
	Badges           []*BadgeType      `json:"badges"`
	Description      *string           `json:"description"`
	Rooms            int64             `json:"rooms"`
	Bedrooms         int64             `json:"bedrooms"`
	Furnished        bool              `json:"furnished"`
	ConstructionDate *time.Time        `json:"constructionDate"`
	EnergyRating     Energy            `json:"energyRating"`
	RentAmount       float64           `json:"rentAmount"`
	ChargesAmount    float64           `json:"chargesAmount"`
}

type Skill struct {
	ID   *int64    `json:"ID" gorm:"primarykey"`
	Type SkillType `json:"type"`
}

type Speciality struct {
	ID   *int64         `json:"ID" gorm:"primarykey"`
	Type SpecialityType `json:"type"`
}

// A Tenant is a
type Tenant struct {
	ID            *int64       `json:"ID" gorm:"primarykey"`
	CreatedAt     *time.Time   `json:"createdAt"`
	UpdatedAt     *time.Time   `json:"updatedAt"`
	Properties    []*Property  `json:"properties" gorm:"many2many:tenant_properties"`
	UserID        *int64       `json:"userID"`
	User          *User        `json:"user" gorm:"foreignKey:UserID"`
	EstateAgentID *int64       `json:"estateAgentID"`
	EstateAgent   *EstateAgent `json:"estateAgent" gorm:"foreignKey:EstateAgentID"`
	Documents     []*Asset     `json:"documents" gorm:"many2many:tenant_documents"`
	Tel           string       `json:"tel"`
	Birthday      time.Time    `json:"birthday"`
	CustomerRef   string       `json:"customerRef"`
	Gender        Gender       `json:"gender"`
}

func (Tenant) IsProfile() {}

type TenantInput struct {
	User        *UserInput `json:"user"`
	Tel         string     `json:"tel"`
	Birthday    time.Time  `json:"birthday"`
	CustomerRef string     `json:"customerRef"`
	Gender      Gender     `json:"gender"`
}

type TenantUpdateInput struct {
	Tel         *string    `json:"tel"`
	Birthday    *time.Time `json:"birthday"`
	CustomerRef *string    `json:"customerRef"`
	Gender      *Gender    `json:"gender"`
}

// A User is a
type User struct {
	ID        *int64     `json:"ID" gorm:"primarykey"`
	CreatedAt *time.Time `json:"createdAt"`
	UpdatedAt *time.Time `json:"updatedAt"`
	Username  string     `json:"username"`
	Password  string     `json:"password"`
	Role      Role       `json:"role"`
}

type UserInput struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

// An AnomalyState is a
type AnomalyStates string

const (
	AnomalyStatesTodo       AnomalyStates = "TODO"
	AnomalyStatesInProgress AnomalyStates = "IN_PROGRESS"
	AnomalyStatesDone       AnomalyStates = "DONE"
)

var AllAnomalyStates = []AnomalyStates{
	AnomalyStatesTodo,
	AnomalyStatesInProgress,
	AnomalyStatesDone,
}

func (e AnomalyStates) IsValid() bool {
	switch e {
	case AnomalyStatesTodo, AnomalyStatesInProgress, AnomalyStatesDone:
		return true
	}
	return false
}

func (e AnomalyStates) String() string {
	return string(e)
}

func (e *AnomalyStates) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AnomalyStates(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AnomalyStates", str)
	}
	return nil
}

func (e AnomalyStates) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// An AnomalyState is a
type AnomalyTypes string

const (
	AnomalyTypesMaintenance   AnomalyTypes = "MAINTENANCE"
	AnomalyTypesPayment       AnomalyTypes = "PAYMENT"
	AnomalyTypesRent          AnomalyTypes = "RENT"
	AnomalyTypesDocuments     AnomalyTypes = "DOCUMENTS"
	AnomalyTypesAccommodation AnomalyTypes = "ACCOMMODATION"
	AnomalyTypesOther         AnomalyTypes = "OTHER"
)

var AllAnomalyTypes = []AnomalyTypes{
	AnomalyTypesMaintenance,
	AnomalyTypesPayment,
	AnomalyTypesRent,
	AnomalyTypesDocuments,
	AnomalyTypesAccommodation,
	AnomalyTypesOther,
}

func (e AnomalyTypes) IsValid() bool {
	switch e {
	case AnomalyTypesMaintenance, AnomalyTypesPayment, AnomalyTypesRent, AnomalyTypesDocuments, AnomalyTypesAccommodation, AnomalyTypesOther:
		return true
	}
	return false
}

func (e AnomalyTypes) String() string {
	return string(e)
}

func (e *AnomalyTypes) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AnomalyTypes(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AnomalyTypes", str)
	}
	return nil
}

func (e AnomalyTypes) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// A Badge is a
type BadgeType string

const (
	BadgeTypeGarden       BadgeType = "Garden"
	BadgeTypeFireplace    BadgeType = "Fireplace"
	BadgeTypeCaretaker    BadgeType = "Caretaker"
	BadgeTypeGreatView    BadgeType = "GreatView"
	BadgeTypeBalcony      BadgeType = "Balcony"
	BadgeTypeSwimmingPool BadgeType = "SwimmingPool"
	BadgeTypeLift         BadgeType = "Lift"
	BadgeTypeTerrace      BadgeType = "Terrace"
	BadgeTypeGarage       BadgeType = "Garage"
	BadgeTypeOrientation  BadgeType = "Orientation"
)

var AllBadgeType = []BadgeType{
	BadgeTypeGarden,
	BadgeTypeFireplace,
	BadgeTypeCaretaker,
	BadgeTypeGreatView,
	BadgeTypeBalcony,
	BadgeTypeSwimmingPool,
	BadgeTypeLift,
	BadgeTypeTerrace,
	BadgeTypeGarage,
	BadgeTypeOrientation,
}

func (e BadgeType) IsValid() bool {
	switch e {
	case BadgeTypeGarden, BadgeTypeFireplace, BadgeTypeCaretaker, BadgeTypeGreatView, BadgeTypeBalcony, BadgeTypeSwimmingPool, BadgeTypeLift, BadgeTypeTerrace, BadgeTypeGarage, BadgeTypeOrientation:
		return true
	}
	return false
}

func (e BadgeType) String() string {
	return string(e)
}

func (e *BadgeType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BadgeType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BadgeType", str)
	}
	return nil
}

func (e BadgeType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// An Energy is a
type Energy string

const (
	EnergyA Energy = "A"
	EnergyB Energy = "B"
	EnergyC Energy = "C"
	EnergyD Energy = "D"
	EnergyE Energy = "E"
	EnergyF Energy = "F"
	EnergyG Energy = "G"
)

var AllEnergy = []Energy{
	EnergyA,
	EnergyB,
	EnergyC,
	EnergyD,
	EnergyE,
	EnergyF,
	EnergyG,
}

func (e Energy) IsValid() bool {
	switch e {
	case EnergyA, EnergyB, EnergyC, EnergyD, EnergyE, EnergyF, EnergyG:
		return true
	}
	return false
}

func (e Energy) String() string {
	return string(e)
}

func (e *Energy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Energy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Energy", str)
	}
	return nil
}

func (e Energy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Gender string

const (
	GenderMan   Gender = "MAN"
	GenderWoman Gender = "WOMAN"
	GenderOther Gender = "OTHER"
)

var AllGender = []Gender{
	GenderMan,
	GenderWoman,
	GenderOther,
}

func (e Gender) IsValid() bool {
	switch e {
	case GenderMan, GenderWoman, GenderOther:
		return true
	}
	return false
}

func (e Gender) String() string {
	return string(e)
}

func (e *Gender) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Gender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Gender", str)
	}
	return nil
}

func (e Gender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// A Priority is a
type Priority string

const (
	PriorityMajor   Priority = "MAJOR"
	PriorityHighest Priority = "HIGHEST"
	PriorityHigh    Priority = "HIGH"
	PriorityMedium  Priority = "MEDIUM"
	PriorityLow     Priority = "LOW"
)

var AllPriority = []Priority{
	PriorityMajor,
	PriorityHighest,
	PriorityHigh,
	PriorityMedium,
	PriorityLow,
}

func (e Priority) IsValid() bool {
	switch e {
	case PriorityMajor, PriorityHighest, PriorityHigh, PriorityMedium, PriorityLow:
		return true
	}
	return false
}

func (e Priority) String() string {
	return string(e)
}

func (e *Priority) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Priority(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Priority", str)
	}
	return nil
}

func (e Priority) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleEstateAgent Role = "ESTATE_AGENT"
	RoleTenant      Role = "TENANT"
	RoleCompany     Role = "COMPANY"
	RoleAdmin       Role = "ADMIN"
)

var AllRole = []Role{
	RoleEstateAgent,
	RoleTenant,
	RoleCompany,
	RoleAdmin,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleEstateAgent, RoleTenant, RoleCompany, RoleAdmin:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SkillType string

const (
	SkillTypeEnglish        SkillType = "ENGLISH"
	SkillTypeSpanish        SkillType = "SPANISH"
	SkillTypeGerman         SkillType = "GERMAN"
	SkillTypeFrench         SkillType = "FRENCH"
	SkillTypeSoftware       SkillType = "SOFTWARE"
	SkillTypeHardWorking    SkillType = "HARD_WORKING"
	SkillTypeRemoteWorking  SkillType = "REMOTE_WORKING"
	SkillTypePensive        SkillType = "PENSIVE"
	SkillTypeListening      SkillType = "LISTENING"
	SkillTypeCommunicating  SkillType = "COMMUNICATING"
	SkillTypeOrganizing     SkillType = "ORGANIZING"
	SkillTypeNegociation    SkillType = "NEGOCIATION"
	SkillTypeResponsiveness SkillType = "RESPONSIVENESS"
)

var AllSkillType = []SkillType{
	SkillTypeEnglish,
	SkillTypeSpanish,
	SkillTypeGerman,
	SkillTypeFrench,
	SkillTypeSoftware,
	SkillTypeHardWorking,
	SkillTypeRemoteWorking,
	SkillTypePensive,
	SkillTypeListening,
	SkillTypeCommunicating,
	SkillTypeOrganizing,
	SkillTypeNegociation,
	SkillTypeResponsiveness,
}

func (e SkillType) IsValid() bool {
	switch e {
	case SkillTypeEnglish, SkillTypeSpanish, SkillTypeGerman, SkillTypeFrench, SkillTypeSoftware, SkillTypeHardWorking, SkillTypeRemoteWorking, SkillTypePensive, SkillTypeListening, SkillTypeCommunicating, SkillTypeOrganizing, SkillTypeNegociation, SkillTypeResponsiveness:
		return true
	}
	return false
}

func (e SkillType) String() string {
	return string(e)
}

func (e *SkillType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SkillType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SkillType", str)
	}
	return nil
}

func (e SkillType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SpecialityType string

const (
	SpecialityTypeResidential        SpecialityType = "RESIDENTIAL"
	SpecialityTypeCommercial         SpecialityType = "COMMERCIAL"
	SpecialityTypePropertyManagement SpecialityType = "PROPERTY_MANAGEMENT"
	SpecialityTypeNewConstruction    SpecialityType = "NEW_CONSTRUCTION"
	SpecialityTypeLuxury             SpecialityType = "LUXURY"
	SpecialityTypeFarms              SpecialityType = "FARMS"
)

var AllSpecialityType = []SpecialityType{
	SpecialityTypeResidential,
	SpecialityTypeCommercial,
	SpecialityTypePropertyManagement,
	SpecialityTypeNewConstruction,
	SpecialityTypeLuxury,
	SpecialityTypeFarms,
}

func (e SpecialityType) IsValid() bool {
	switch e {
	case SpecialityTypeResidential, SpecialityTypeCommercial, SpecialityTypePropertyManagement, SpecialityTypeNewConstruction, SpecialityTypeLuxury, SpecialityTypeFarms:
		return true
	}
	return false
}

func (e SpecialityType) String() string {
	return string(e)
}

func (e *SpecialityType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SpecialityType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SpecialityType", str)
	}
	return nil
}

func (e SpecialityType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
