// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Profile interface {
	IsProfile()
}

// An Admin is a
type Admin struct {
	ID        *int64     `json:"ID" gorm:"primarykey"`
	CreatedAt *time.Time `json:"createdAt"`
	UpdatedAt *time.Time `json:"updatedAt"`
	UserID    *int64     `json:"userID"`
	User      *User      `json:"user" gorm:"foreignKey:UserID"`
}

type AdminInput struct {
	User *UserInput `json:"user"`
}

// An Anomaly is a
type Anomaly struct {
	ID           *int64         `json:"ID" gorm:"primarykey"`
	CreatedAt    *time.Time     `json:"createdAt"`
	UpdatedAt    *time.Time     `json:"updatedAt"`
	AssignedToID *int64         `json:"assignedToID"`
	AssignedTo   *EstateAgent   `json:"assignedTo" gorm:"foreignKey:AssignedToID"`
	CreateByID   *int64         `json:"createByID"`
	CreateBy     *Tenant        `json:"createBy" gorm:"foreignKey:AssignedToID"`
	PropertyID   *int64         `json:"propertyID"`
	Property     *Property      `json:"property" gorm:"foreignKey:AssignedToID"`
	Description  string         `json:"description"`
	Type         string         `json:"type"`
	State        *AnomalyStates `json:"state"`
}

type AnomalyInput struct {
	Property    *int64 `json:"property"`
	Type        string `json:"type"`
	Description string `json:"description"`
}

type AnomalyUpdateInput struct {
	AssignedTo *int64         `json:"assignedTo"`
	State      *AnomalyStates `json:"state"`
}

// An Asset is a document or a picture
type Asset struct {
	ID        *int64     `json:"ID" gorm:"primarykey"`
	CreatedAt *time.Time `json:"createdAt"`
	UpdatedAt *time.Time `json:"updatedAt"`
	URL       string     `json:"url"`
	Type      string     `json:"type"`
	Storage   string     `json:"storage"`
}

// A Company is a
type Company struct {
	ID          *int64     `json:"ID" gorm:"primarykey"`
	CreatedAt   *time.Time `json:"createdAt"`
	UpdatedAt   *time.Time `json:"updatedAt"`
	Name        string     `json:"name"`
	LogoID      *int64     `json:"logoID"`
	Logo        *Asset     `json:"logo" gorm:"foreignKey:LogoID"`
	Description *string    `json:"description"`
	Tel         string     `json:"tel"`
	UserID      *int64     `json:"userID"`
	User        *User      `json:"user" gorm:"foreignKey:UserID"`
	Verified    *bool      `json:"verified"`
}

func (Company) IsProfile() {}

type CompanyInput struct {
	Name        string     `json:"name"`
	User        *UserInput `json:"user"`
	Logo        *string    `json:"logo"`
	Description string     `json:"description"`
	Tel         string     `json:"tel"`
}

// A Credential is a
type Credential struct {
	User  *User   `json:"user"`
	Token *string `json:"token"`
}

// An EstateAgent is a
type EstateAgent struct {
	ID        *int64     `json:"ID" gorm:"primarykey"`
	CreatedAt *time.Time `json:"createdAt"`
	UpdatedAt *time.Time `json:"updatedAt"`
	CompanyID *int64     `json:"companyID"`
	Company   *Company   `json:"company" gorm:"foreignKey:CompanyID"`
	UserID    *int64     `json:"userID"`
	User      *User      `json:"user" gorm:"foreignKey:UserID"`
}

func (EstateAgent) IsProfile() {}

type EstateAgentInput struct {
	User *UserInput `json:"user"`
}

// A Property  is a
type Property struct {
	ID         *int64     `json:"ID" gorm:"primarykey"`
	CreatedAt  *time.Time `json:"createdAt"`
	UpdatedAt  *time.Time `json:"updatedAt"`
	Area       *float64   `json:"area"`
	Address    *string    `json:"address"`
	CodeNumber *int64     `json:"codeNumber"`
	Type       *string    `json:"type"`
}

type PropertyInput struct {
	Area       *float64 `json:"area"`
	Address    *string  `json:"address"`
	CodeNumber *int64   `json:"codeNumber"`
	Type       *string  `json:"type"`
}

// A Tenant is a
type Tenant struct {
	ID            *int64       `json:"ID" gorm:"primarykey"`
	CreatedAt     *time.Time   `json:"createdAt"`
	UpdatedAt     *time.Time   `json:"updatedAt"`
	Properties    []*Property  `json:"properties" gorm:"many2many:tenant_properties"`
	UserID        *int64       `json:"userID"`
	User          *User        `json:"user" gorm:"foreignKey:UserID"`
	EstateAgentID *int64       `json:"estateAgentID"`
	EstateAgent   *EstateAgent `json:"estateAgent" gorm:"foreignKey:EstateAgentID"`
	Documents     []*Asset     `json:"documents" gorm:"many2many:tenant_documents"`
}

func (Tenant) IsProfile() {}

type TenantInput struct {
	User *UserInput `json:"user"`
}

type TenantUpdateInput struct {
	Properties []*int64  `json:"properties"`
	Documents  []*string `json:"documents"`
}

// A User is a
type User struct {
	ID        *int64     `json:"ID" gorm:"primarykey"`
	CreatedAt *time.Time `json:"createdAt"`
	UpdatedAt *time.Time `json:"updatedAt"`
	Username  string     `json:"username"`
	Password  string     `json:"password"`
	Role      Role       `json:"role"`
}

type UserInput struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

// An AnomalyState is a
type AnomalyStates string

const (
	AnomalyStatesTodo       AnomalyStates = "TODO"
	AnomalyStatesInProgress AnomalyStates = "IN_PROGRESS"
	AnomalyStatesDone       AnomalyStates = "DONE"
)

var AllAnomalyStates = []AnomalyStates{
	AnomalyStatesTodo,
	AnomalyStatesInProgress,
	AnomalyStatesDone,
}

func (e AnomalyStates) IsValid() bool {
	switch e {
	case AnomalyStatesTodo, AnomalyStatesInProgress, AnomalyStatesDone:
		return true
	}
	return false
}

func (e AnomalyStates) String() string {
	return string(e)
}

func (e *AnomalyStates) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AnomalyStates(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AnomalyStates", str)
	}
	return nil
}

func (e AnomalyStates) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleEstateAgent Role = "ESTATE_AGENT"
	RoleTenant      Role = "TENANT"
	RoleCompany     Role = "COMPANY"
	RoleAdmin       Role = "ADMIN"
)

var AllRole = []Role{
	RoleEstateAgent,
	RoleTenant,
	RoleCompany,
	RoleAdmin,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleEstateAgent, RoleTenant, RoleCompany, RoleAdmin:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
